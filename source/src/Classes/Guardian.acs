#library "Guardian"
#import "DEFINITIONS.acs"
#include "zcommon.acs"

int buttons;
int nobuttons;	

script "GuardianFirstAbility" (void)
{
	Spawn("SmokeCanister", GetActorX(0), GetActorY(0), GetActorZ(0));
	ACS_NamedExecute("activateCooldown", 0, 1);
}

script "GuardianSecondAbility" (void)
{
	//===========================================================================================
	//cooldown initiation.
	//===========================================================================================
	ACS_NamedExecuteAlways("activateCooldown", 0, 2);
	
	//===========================================================================================
	//prerequistes to run the ability if any... (very rare occasion, will probably remove)
	//===========================================================================================
	int armorAmt = CheckInventory("BasicArmor");
	if (armorAmt < 75)
	{
		HudMessage(s:"You need 75 armor points to activate this ability"; HUDMSG_PLAIN, 7, CR_GOLD, 0.5, 0.125, 1.0);
		terminate;
	}
	
	//===========================================================================================
	//class specific sound and inventory beginning routine handling
	//===========================================================================================
	
	//armor inventory stuff
	int dmgAmt = 300 - armorAmt;
	PlaySound(0, "Guardian/Abilities/ArmorActivate", 0, 1.0, false, ATTN_NORM, true);
	GiveInventory("GuardianArmorAbility", 1);
	GiveInventory("GuardianMegaArmor",1);
	TakeInventory("BasicArmor", dmgAmt);
	ACS_NamedExecuteAlways("armorHitSound", 0);
	ACS_NamedExecuteAlways("abilityStateHandling", 0, 2);
	
	//===========================================================================================
	//class specific sound and inventory end routine handling
	//===========================================================================================
}

script "GuardianAbilityEnd" (void)
{
	//armor inventory stuff
	int amtUpdate = CheckInventory("BasicArmor");
	int dmgUpdate = 300 - amtUpdate;
	TakeInventory("AbilityPowerGiver", 1);
	TakeInventory("GuardianMegaArmor", 1);
	GiveInventory("GuardianArmor", 1);
	TakeInventory("BasicArmor", dmgUpdate);
}

script "armorHitSound" (void)
{
	while (CheckInventory("AbilityPowerGiver") == 1 && GetActorProperty(PlayerNumber(),APROP_Health) > 0)
	{
		int currentArmor = CheckInventory("BasicArmor");
		delay(1);
		int newArmor = CheckInventory("BasicArmor");
		if (newArmor != currentArmor)
		{
			SetActorState(0, "ArmorDamage", true);
		}
	}
	delay(1);
}

script "GuardianStunner" (void)
{
	if(PlayerClass(PlayerNumber()) >= SEEKER_CLASS_START)
	{
		SetFont("BIGFONT");
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		HudMessage(s:"STUNNED"; HUDMSG_PLAIN, 0, CR_RED, 0.5, 0.5, 3.0, 1.0);
		FadeTo(255, 255, 255, 0.33, 0);
		FadeTo(255, 255, 255, 0.0, 3.0);
		Delay(105);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
	}
}

Script "chargeableJump" (void) CLIENTSIDE
{
	int holdTime;
	
	if(PlayerClass(PlayerNumber())==CLASS_GUARDIAN) //Guardian check
	{
		while (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(),APROP_Health) > 0)
		{
			if (CheckInventory("JumpChargeActive") == 0)
			{
				TakeInventory("JumpCharge", 5);
			}
			
			buttons = GetPlayerInput(-1, INPUT_BUTTONS);
			nobuttons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
			
			//jump state was detected
			if (buttons & BT_JUMP) 
			{
				GiveInventory("JumpChargeActive", 1);
				//activated by initial trigger and holding down
				if (nobuttons & BT_JUMP)
				{
					if (CheckInventory("JumpCharge") != 5)
					{
						holdTime++;
						
						if (holdTime == 30)
						{
							ACS_NamedExecuteAlways("giveJumpCharge", 0);
							holdTime = 0;
						}
					}
				}
				else
				{
				}
			}
			//release detection
			else
			{
				//check if actor is on the ground, then perform the jump
				if (nobuttons & BT_JUMP)
				{
					if ((GetActorZ(0) - GetActorFloorZ(0)) == 0 && (GetActorProperty(1000 + PlayerNumber(), APROP_Health) > 0))
					{
						int jumpHeight = CheckInventory("JumpCharge");
						ACS_NamedExecuteAlways("jumpChargeHeight", 0, jumpHeight);
					}
					holdTime = 0;
					TakeInventory("JumpChargeActive", 1);
					TakeInventory("JumpCharge", 5);
				}
				else
				{
					//do nothing
				}
			}
		delay(1);	
		}
	}
}

Script "giveJumpCharge" (void)
{
	PlaySound(PLAYER_BASE_TID + PlayerNumber(), "Guardian/ChargingJump", 7, 1.0, false, true);
	GiveInventory("JumpCharge", 1);
}

Script "jumpChargeHeight" (int jHeight)
{
	int pT = PLAYER_BASE_TID + PlayerNumber();
	switch (jHeight)
	{
		case 0:
			ThrustThingZ(pT, 35, 0, 0);
			break;
		case 1:
			ThrustThingZ(pT, 45, 0, 0);
			break;
		case 2:
			ThrustThingZ(pT, 55, 0, 0);
			break;
		case 3:
			ThrustThingZ(pT, 65, 0, 0);
			break;
		case 4:
			ThrustThingZ(pT, 75, 0, 0);
			break;
		case 5:
			ThrustThingZ(pT, 85, 0, 0);
			break;
		default:
			Log(s:"The script is broekn!!!!!!!!!!");
			break;
	}
	
	if (jHeight != 0)
	{
		PlaySound(PLAYER_BASE_TID + PlayerNumber(), "Guardian/JumpRelease", 7);
	}
}