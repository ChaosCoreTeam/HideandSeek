#library "Guardian"
#import "DEFINITIONS.acs"
#include "zcommon.acs"

int healthPreviousTic[MAXPLAYERS];
int healthCurrentTic[MAXPLAYERS];
int altfirePreviousTic[MAXPLAYERS];
int altfireCurrentTic[MAXPLAYERS];
int firePreviousTic[MAXPLAYERS];
int fireCurrentTic[MAXPLAYERS];
int useInitialTic[MAXPLAYERS];
int usePreviousTic[MAXPLAYERS];
int useCurrentTic[MAXPLAYERS];

script "GuardianFirstAbility" (void)
{
	Spawn("SmokeCanister", GetActorX(0), GetActorY(0), GetActorZ(0));
	ACS_NamedExecute("activateCooldown", 0, 1);
}

script "GuardianSecondAbility" (void)
{
	//===========================================================================================
	//cooldown initiation.
	//===========================================================================================
	ACS_NamedExecuteAlways("activateCooldown", 0, 2);
	
	//===========================================================================================
	//prerequistes to run the ability if any... (very rare occasion, will probably remove)
	//===========================================================================================
	int armorAmt = CheckInventory("BasicArmor");
	if (armorAmt < 75)
	{
		HudMessage(s:"You need 75 armor points to activate this ability"; HUDMSG_PLAIN, 7, CR_GOLD, 0.5, 0.125, 1.0);
		terminate;
	}
	
	//===========================================================================================
	//class specific sound and inventory beginning routine handling
	//===========================================================================================
	
	//armor inventory stuff
	int dmgAmt = 300 - armorAmt;
	PlaySound(0, "Guardian/Abilities/ArmorActivate", 0, 1.0, false, ATTN_NORM, true);
	GiveInventory("GuardianArmorAbility", 1);
	GiveInventory("GuardianMegaArmor",1);
	TakeInventory("BasicArmor", dmgAmt);
	ACS_NamedExecuteAlways("armorHitSound", 0);
	ACS_NamedExecuteAlways("abilityStateHandling", 0, 2);
	
	//===========================================================================================
	//class specific sound and inventory end routine handling
	//===========================================================================================
}

script "GuardianAbilityEnd" (void)
{
	//armor inventory stuff
	int amtUpdate = CheckInventory("BasicArmor");
	int dmgUpdate = 300 - amtUpdate;
	TakeInventory("AbilityPowerGiver", 1);
	TakeInventory("GuardianMegaArmor", 1);
	GiveInventory("GuardianArmor", 1);
	TakeInventory("BasicArmor", dmgUpdate);
}

script "armorHitSound" (void)
{
	while (CheckInventory("AbilityPowerGiver") == 1 && GetActorProperty(PlayerNumber(),APROP_Health) > 0)
	{
		int currentArmor = CheckInventory("BasicArmor");
		delay(1);
		int newArmor = CheckInventory("BasicArmor");
		if (newArmor != currentArmor)
		{
			SetActorState(0, "ArmorDamage", true);
		}
	}
	delay(1);
}

script "GuardianStunner" (void)
{
	if(PlayerClass(PlayerNumber()) >= SEEKER_CLASS_START)
	{
		SetFont("BIGFONT");
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		HudMessage(s:"STUNNED"; HUDMSG_PLAIN, 0, CR_RED, 0.5, 0.5, 3.0, 1.0);
		FadeTo(255, 255, 255, 0.33, 0);
		FadeTo(255, 255, 255, 0.0, 3.0);
		Delay(105);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
	}
}

script "GuardianShieldHandling" (void)
{
	int playerNum = PlayerNumber();
	int playerTid = playerNum + PLAYER_BASE_TID;
	
	if (PlayerClass(playerNum) == CLASS_GUARDIAN)
	{
		while (GetActorProperty(playerTid,APROP_Health) > 0) 
		{
			if (CheckInventory("ShieldFull"))
			{
				if (shieldNotCharged(playerNum, playerTid))
				{
					print(s:"inside not charged function");
				}
				if (checkweapon("GreenShield") && checkinventory("greenmana") < 100)
				{
					GiveInventory("ShieldNotFull", 1);
				}
			}
			if (CheckInventory("ShieldUp") == 1)
			{
				recordGuardianHealth(playerNum, playerTid);
				
				if (playerTookDamage(playerNum))
				{
					int dmgAmt = healthPreviousTic[playerNum] - healthCurrentTic[playerNum];
					log(s:"guardian took... ", d:dmgAmt, s:" damage");
					int redAmt = dmgAmt / 6;
					TakeInventory("GuardianPower", dmgAmt);
					HealThing(redAmt);
					log(s:"reduced damage was", d:redAmt, s:" damage");
				}
				if (checkinventory("GuardianFireState"))
				{
					recordAltFirePress(playerNum, playerTid);
					if (playerPressedAltFire(playerNum))
					{
						log(s:"alt fire detected");
						GiveInventory("GuardianFireAlt", 1);
					}
					if (playerPressedUse(playerNum))
					{
						log(s:"use detected");
						GiveInventory("GuardianFireAlt", 1);
					}
				}
				if (checkinventory("GuardianAltFireState"))
				{
					recordFirePress(playerNum, playerTid);
					if (playerPressedFire(playerNum))
					{
						GiveInventory("GuardianAltFireAlt", 1);
						if (checkinventory("greenshieldinv") && getactorproperty(playerNum, APROP_Health) > 150)
						{
							TakeInventory("GuardianAltFireAlt", 1);
							print(s:"already at full health!");
						}
						
					}
				}
			}
		Delay(1);
		}
	}
}

function void recordGuardianHealth(int playerNum, int playerTid) {
	int health = GetActorProperty(playerTid, APROP_HEALTH);
	healthPreviousTic[playerNum] = healthCurrentTic[playerNum];
	healthCurrentTic[playerNum] = health;
}

function void recordAltFirePress(int playerNum, int playerTid) {
	int altfire = (GetPlayerInput(playerNum, INPUT_BUTTONS) & BT_ALTATTACK) == BT_ALTATTACK;
	altfirePreviousTic[playerNum] = altfireCurrentTic[playerNum];
	altfireCurrentTic[playerNum] = altfire;
}

function void recordFirePress(int playerNum, int playerTid) {
	int fire = (GetPlayerInput(playerNum, INPUT_BUTTONS) & BT_ATTACK) == BT_ATTACK;
	firePreviousTic[playerNum] = fireCurrentTic[playerNum];
	fireCurrentTic[playerNum] = fire;
}

function void recordUsePress(int playerNum, int playerTid) {
	int use = (GetPlayerInput(playerNum, INPUT_BUTTONS) & BT_USE) == BT_USE;
	useInitialTic[playerNum] = usePreviousTic[playerNum];
	usePreviousTic[playerNum] = useCurrentTic[playerNum];
	useCurrentTic[playerNum] = use;
}

function bool playerTookDamage (int playerNum)
{
	return healthCurrentTic[playerNum] < healthPreviousTic[playerNum];
}

function bool playerPressedAltFire (int playerNum)
{
	return altfireCurrentTic[playerNum];
}

function bool playerPressedFire (int playerNum)
{
	return fireCurrentTic[playerNum];
}

function bool playerPressedUse(int playerNum)
{
	return useCurrentTic[playerNum];
}

function bool shieldNotCharged(int playerNum, int playerTid) {
	int grn = greenShieldCheck(playerNum);
	int red = redShieldCheck(playerNum);
	int blu = blueShieldCheck(playerNum);
	int yel = yellowShieldCheck(playerNum);
	int pin = pinkShieldCheck(playerNum);
	return grn && red && blu && yel && pin;
}

function bool greenShieldCheck(int playerNum)
{
	return checkweapon("GreenShield") && checkinventory("greenmana") < 100;
}

function bool redShieldCheck (int playerNum)
{
	return checkweapon("RedShield") && checkinventory("redmana") < 100;
}

function bool blueShieldCheck (int playerNum)
{
	return checkweapon("BlueShield") && checkinventory("bluemana") < 100;
}

function bool yellowShieldCheck (int playerNum)
{
	return checkweapon("YellowShield") && checkinventory("yellowmana") < 100;
}

function bool pinkShieldCheck (int playerNum)
{
	return checkweapon("PinkShield") && checkinventory("pinkmana") < 100;
}