#library "Illusionist"
#import "DEFINITIONS.acs"
#include "zcommon.acs"
#import "GLOBAL.acs"

//===========================================================================================
// Disguise Ability
//===========================================================================================

script "IllusionistFirstAbility" (void)
{
	//makes it so you can toggle it on and off	
	if (CheckInventory("IllusionistFirstActive") == true)
	{
		TakeInventory("IllusionistFirstActive", 1);
		terminate;
	}
	
	//custom inventory then stateHandler
	int seekerClass = Random(6,11);
	GiveInventory(StrParam(s:classNames[seekerClass], s:"Disguise"), 1);
	//GiveInventory("isMorphed", 1);
	PlaySound(0, "Illusionist/Abilities/Disguise", 0);
	ACS_NamedExecuteAlways("abilityStateHandling", 0, 1);
}

script "IllusionistFirstAbilityEnd" (void)
{
	//reset procedures to fix vanishing, armor&health stats
	TakeInventory("IllusionistFirstActive", 1);
	PlaySound(0, "Illusionist/Abilities/Disguise", 0);
	
	//activate cooldown and reset character
	str disguise = disguiseName();
	TakeInventory(disguise, 1);
	ACS_NamedExecuteAlways("activateCooldown", 0, 1);
	ACS_NamedExecuteAlways("vanishingSetup",0);
}

function str disguiseName(void) 
{
	for (int x = SEEKER_CLASS_START; x <= SEEKER_CLASS_END; x++)
	{
		if (CheckInventory(StrParam(s:classNames[x], s: "Disguise")) == true)
		{
			str disguiseClass = StrParam(s:classNames[x], s: "Disguise");
			return disguiseClass;
		}
	}
	return "";
}

//===========================================================================================
// Shrink Ability
//===========================================================================================

script "IllusionistSecondAbility" (void)
{
	//makes it so you can toggle it on and off
	if (CheckInventory("IllusionistSecondActive") == true)
	{	
		TakeInventory("IllusionistSecondActive", 1);
		terminate;
	}
		//custom inventory then stateHandler
		GiveInventory("ShrinkMorph", 1);
		PlaySound(0, "Illusionist/Abilities/Shrink", 6);
		ACS_NamedExecuteAlways("hudShrink", 0);
		ACS_NamedExecuteAlways("abilityStateHandling", 0, 1);
}

script "IllusionistSecondAbilityEnd" (void)
{
	//reset procedures to fix vanishing, armor&health stats
	TakeInventory("ShrinkMorph", 1);
	PlaySound(0, "Illusionist/Abilities/Unshrink", 6);
	
	//cooldown and reset character
	ACS_NamedExecuteAlways("activateCooldown", 0, 2);
	ACS_NamedExecuteAlways("vanishingSetup", 0);
}

//===========================================================================================
// Decoy Weapon Handling
//===========================================================================================

script "handleDecoyId" (int selector)
{
	int activator = PlayerNumber()+1000;
	int decoyId = PlayerNumber() + DECOY_TID_INDEX;

	if (selector == 0)
	{
		Thing_ChangeTid(4999, decoyId);
		ACS_NamedExecuteAlways("takeDecoyEnergy", 0, decoyId);	
	}	

	if (selector == 1)
	{
		SetActorState(decoyId, "Death", true);
	}
}

script "takeDecoyEnergy" (int decoyId)
{
		While (CheckInventory("decoySpawned"))
		{
			TakeInventory("DecoyEnergy", 1);
			Delay(35);
			if (CheckInventory("DecoyEnergy" == 0))
			{
				SetActorState(decoyId, "Death", true);
				TakeInventory("decoySpawned", 1);
				terminate;
			}
		}
}

script "vanishDecoy" (int selector)
{
	int activator = PlayerNumber()+1000;
	//SetActivator(activator);
	int decoyId = PlayerNumber() + DECOY_TID_INDEX;
	
	if (!IsTIDUsed(decoyId))
	{
		HudMessage(s:"You don't have a decoy!"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 0.5, 0.5);
		terminate;
	}
	
	if (selector == 0)
	{
		SetActorState(decoyId, "Vanish", true);
		ACS_NamedExecute("decoyEnergyVanish", 0);
	}
	
	if (selector == 1)
	{
		SetActorState(decoyId, "VanishOff", true);
	}	
}

script "decoyEnergyVanish" (int decoyId)
{
	While (CheckInventory("decoySpawned") && CheckInventory("decoyVanished"))
	{
		TakeInventory("DecoyEnergy", 1);
		Delay(35);
		if (CheckInventory("DecoyEnergy" == 0))
		{
			SetActorState(decoyId, "Death", true);
			TakeInventory("decoySpawned", 1);
			terminate;
		}
	}
}