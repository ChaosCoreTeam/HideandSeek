#library "Illusionist"
#import "DEFINITIONS.acs"
#include "zcommon.acs"
#import "GLOBAL.acs"

int buttons;
int nobuttons;

//===========================================================================================
// Disguise Ability
//===========================================================================================

script "IllusionistFirstAbility" (void)
{
	//makes it so you can toggle it on and off	
	if (CheckInventory("IllusionistFirstActive") == true)
	{
		TakeInventory("IllusionistFirstActive", 1);
		terminate;
	}
	
	//custom inventory then stateHandler
	int seekerClass = Random(6,11);
	GiveInventory(StrParam(s:classNames[seekerClass], s:"Disguise"), 1);
	//GiveInventory("isMorphed", 1);
	PlaySound(0, "Illusionist/Abilities/Disguise", 0);
	ACS_NamedExecuteAlways("abilityStateHandling", 0, 1);
}

script "IllusionistFirstAbilityEnd" (void)
{
	//reset procedures to fix vanishing, armor&health stats
	TakeInventory("IllusionistFirstActive", 1);
	PlaySound(0, "Illusionist/Abilities/Disguise", 0);
	
	//activate cooldown and reset character
	str disguise = disguiseName();
	TakeInventory(disguise, 1);
	ACS_NamedExecuteAlways("activateCooldown", 0, 1);
	ACS_NamedExecuteAlways("vanishingSetup",0);
}

function str disguiseName(void) 
{
	for (int x = SEEKER_CLASS_START; x <= SEEKER_CLASS_END; x++)
	{
		if (CheckInventory(StrParam(s:classNames[x], s: "Disguise")) == true)
		{
			str disguiseClass = StrParam(s:classNames[x], s: "Disguise");
			return disguiseClass;
		}
	}
	return "";
}

//===========================================================================================
// Shrink Ability
//===========================================================================================

script "IllusionistSecondAbility" (void)
{
	//makes it so you can toggle it on and off
	if (CheckInventory("IllusionistSecondActive") == true)
	{	
		TakeInventory("IllusionistSecondActive", 1);
		terminate;
	}
		//custom inventory then stateHandler
		GiveInventory("ShrinkMorph", 1);
		PlaySound(0, "Illusionist/Abilities/Shrink", 6);
		ACS_NamedExecuteAlways("hudShrink", 0);
		ACS_NamedExecuteAlways("abilityStateHandling", 0, 1);
}

script "IllusionistSecondAbilityEnd" (void)
{
	//reset procedures to fix vanishing, armor&health stats
	TakeInventory("ShrinkMorph", 1);
	PlaySound(0, "Illusionist/Abilities/Unshrink", 6);
	
	//cooldown and reset character
	ACS_NamedExecuteAlways("activateCooldown", 0, 2);
	ACS_NamedExecuteAlways("vanishingSetup", 0);
}

//===========================================================================================
// Decoy Weapon Handling
//===========================================================================================

script "decoyFireHandling" (void)
{
	int holdTime;
	
	if(PlayerClass(PlayerNumber())==CLASS_ILLUSIONIST) //Guardian check
	{
		while (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(),APROP_Health) > 0)
		{
			buttons = GetPlayerInput(-1, INPUT_BUTTONS);
			nobuttons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
			
			if (checkinventory("wepFire"))
			{
				holdTime = 0;
			}
			
			if (buttons & BT_ATTACK)
			{
				if (nobuttons & BT_ATTACK)
				{
					holdTime++;
					log(d:holdTime);
				}
				else
				{
				}
			}
			//release detection
			else
			{
				if (nobuttons & BT_ATTACK)
				{
					if (checkinventory("wepFire") == false)
					{
						GiveInventory("wepFire", 1);
						if (holdTime < 7)
						{
							if(CheckInventory("decoySpawned"))
							{
								ACS_NamedExecuteAlways("handleDecoy", 0, 1);
							}
							if(!CheckInventory("decoySpawned"))
							{
								GiveInventory("spawnDecoy", 1);
							}
						}
						if (holdTime >= 7)
						{
							if (!CheckInventory("decoyVanished"))
							{
								ACS_NamedExecuteAlways("vanishDecoy", 0, 0);
							}
							if (CheckInventory("decoyVanished"))
							{
								ACS_NamedExecuteAlways("vanishDecoy", 0, 1);
							}
						}
					}
				}
				else
				{
					//notta
				}
			}
			
		delay(1);
		}
	}
}

script "handleDecoy" (int selector)
{
	int activator = PlayerNumber()+1000;
	int decoyId = PlayerNumber() + DECOY_TID_INDEX;

	PlaySound(0, "Illusionist/Weapons/SpawnDecoy", 0, 1.0, false, 0.0);
	
	if (selector == 0)
	{
		GiveInventory("decoySpawned", 1);
		Thing_ChangeTid(4999, decoyId);
		ACS_NamedExecuteAlways("takeDecoyEnergy", 0, decoyId);	
	}	

	if (selector == 1)
	{
		TakeInventory("decoyVanished", 1);
		TakeInventory("decoySpawned", 1);
		SetActorState(decoyId, "Death", true);
	}
	
}

// decoy energy handling
script "takeDecoyEnergy" (int decoyId)
{
		While (CheckInventory("decoySpawned"))
		{
			TakeInventory("DecoyEnergy", 1);
			Delay(35);
			if (CheckInventory("DecoyEnergy" == 0))
			{
				SetActorState(decoyId, "Death", true);
				TakeInventory("decoySpawned", 1);
				terminate;
			}
		}
}

// vanish decoy handling
script "vanishDecoy" (int selector)
{
	int activator = PlayerNumber()+1000;
	//SetActivator(activator);
	int decoyId = PlayerNumber() + DECOY_TID_INDEX;
	
	if (!IsTIDUsed(decoyId))
	{
		HudMessage(s:"You don't have a decoy!"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 0.5, 0.5);
		terminate;
	}
	
	if (selector == 0)
	{
		GiveInventory("decoyVanished", 1);
		PlaySound (0, "VanishOn", 0, 1.0, false, 0.0);
		SetActorState(decoyId, "Vanish", true);
		ACS_NamedExecute("decoyEnergyVanish", 0);
	}
	
	if (selector == 1)
	{
		TakeInventory("decoyVanished", 1);
		PlaySound (0, "VanishOff", 0, 1.0, false, 0.0);
		SetActorState(decoyId, "VanishOff", true);
	}	
}

// vanishing decoy energy handling
script "decoyEnergyVanish" (int decoyId)
{
	While (CheckInventory("decoySpawned") && CheckInventory("decoyVanished"))
	{
		TakeInventory("DecoyEnergy", 1);
		Delay(35);
		if (CheckInventory("DecoyEnergy" == 0))
		{
			SetActorState(decoyId, "Death", true);
			TakeInventory("decoySpawned", 1);
			terminate;
		}
	}
}

script "decoyAltHandling" (void)
{
	if(PlayerClass(PlayerNumber())==CLASS_ILLUSIONIST) //Guardian check
	{
		while (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(),APROP_Health) > 0)
		{
			buttons = GetPlayerInput(-1, INPUT_BUTTONS);
			nobuttons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
			
			//trigger alt fire
			if (buttons & BT_ALTATTACK)
			{
				ACS_NamedExecuteAlways("nextDecoy", 0);
				Delay(10);
			}
			else
			{
				//nothing
			}
		delay(1);	
		}
	}
}

script "nextDecoy" (void)
{
	int oldSel = decoyWeaponCheck();
	if (oldSel != 0)
	{
		str oldSelString = StrParam(s:classNames[oldSel],s:"Sel");
		log(s:"Took ",s:oldSelString);
		TakeInventory(oldSelString, 1);
	}
	int newSel = oldSel + 1;
	if (newSel == SEEKER_CLASS_START)
	{
		newSel = 0;
	}
	if (newSel != 0)
	{
		str newSelString = StrParam(s:classNames[newSel],s:"Sel");
		log(s:"Gave ",s:newSelString);
		GiveInventory(newSelString, 1);
	}
}

function int decoyWeaponCheck (void)
{
	for (int x = 0; x < SEEKER_CLASS_START; x++)
	{
		if (x > 0)
		{
			str wString = StrParam(s:classNames[x],s:"Sel");
			if (CheckInventory(wString))
			{
				return x;
			}
		}
	}
	return 0;
}