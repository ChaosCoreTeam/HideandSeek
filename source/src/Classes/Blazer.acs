#library "Blazer"
#include "DEFINITIONS.acs"

script "BlazerFirstAbility" (int cooldownTime) NET
{
	if (!CheckInventory("Dashes"))
	{
		ACS_NamedExecuteAlways("cooldownActive", 0);
		terminate;
	}
	
	if (CheckInventory("Dashes") == 3)
	{
		TakeInventory("DashCooldown", 10);
		ACS_NamedExecuteAlways("dashCoolProcess", 0);
	}
	
	ThrustThing(GetActorAngle(0) >> 8, 75, 1, 0);
	PlaySound (0, "Blazer/Abilities/Dash", 5);
	TakeInventory("Dashes", 1);
}

script "dashCoolProcess" (void) NET
{
	While (CheckInventory("Dashes") < 3)
	{
		for (int x = 0; x <= 10; x++)
		{
			Delay(35);
			GiveInventory("DashCooldown", 1);
		}
		GiveInventory("Dashes", 1);
		If (CheckInventory("Dashes") < 3)
			TakeInventory("DashCooldown", 10);
	}
}

script "BlazerSecondAbility" (int cooldownTime) NET
{
	int recallTid = PlayerNumber() + 500;
	If (ThingCount(T_NONE, recallTid) == 0)
	{
		If (CheckInventory("Recall"))
		{
			HudMessage(s:"Have recall inventory but no placement"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 3.0);
			Delay(70);
			SpawnProjectile(0, "BlazerRecall", GetActorAngle(0) >> 8, 0, 0, 1, recallTid);
			ACS_NamedExecute("hudRecall", 0, recallTid);
			terminate;
		}
		GiveInventory("Recall", 1);
		SpawnProjectile(0, "BlazerRecall", GetActorAngle(0) >> 8, 0, 0, 1, recallTid);
		ACS_NamedExecute("hudRecall", 0, recallTid, cooldownTime);
		terminate;
	}
	TakeInventory("Recall", 1);
	SetActorPosition(0, GetActorX(recallTid), GetActorY(recallTid), GetActorZ(recallTid), 0);
	PlaySound(recallTid, "Blazer/Abilities/Recall", 6);
	Thing_Remove(recallTid);
}

script "hudRecall" (int recallTid, int cooldownTime) NET
{
	HudMessage(s:"Recall Initiated"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 3.0);
	While (ThingCount(T_NONE, recallTid) > 0)
	{
		For (int x = 3; x > 0; x--)
		{
			HudMessage(d:x, s:" seconds left to recall"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 3.0);
			Delay(35);
			If (!CheckInventory("Recall"))
			{
				HudMessage(s:"Recall successful"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 3.0);
				ACS_NamedExecuteAlways("activateSecondaryCooldown", 0, "BlazerSecondCooldown", cooldownTime);
				terminate;
			}
		}
		HudMessage(s:"Recall failure"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 3.0);
		ACS_NamedExecute("recallFail", 0, recallTid);
		terminate;
	}
}

script "recallFail" (int recallTid) NET
{
	TakeInventory("Recall", 1);
	Thing_Remove(recallTid);
	Delay(35);
	
	if (!ThingCount(T_NONE, recallTid) && !CheckInventory("Recall"))
	{
		HudMessage(s:"Recall process reset"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 3.0);
		terminate;
	}
		HudMessage(s:"wtf recall"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 3.0);
}