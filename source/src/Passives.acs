#library "Passives"
#import "DEFINITIONS.acs"
#import "FUNCTION.acs"
#include "zcommon.acs"

//===========================================================================================
//
//		Chargeable Jump
//		Given to the Hunter, will probably give to others
//
//===========================================================================================

Script "doubleJump" (void)
{
	bool jumpInt;
	bool secondGave;
	bool secondAct;
	if(PlayerClass(PlayerNumber())==CLASS_HUNTER) //Guardian check
	{
		while (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(),APROP_Health) > 0)
		{
			buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
			//jump state was detected
			if (buttons & BT_JUMP) 
			{
				//checks if we already gave you a secondjump and checks to see if it's been activated already
				if (secondGave == true && secondAct == false)
				{
					//air check
					if ((GetActorZ(0) - GetActorFloorZ(0) > 8.0 && GetActorProperty(1000 + PlayerNumber(), APROP_Health) > 0))
					{
						PlaySound(PLAYER_BASE_TID + PlayerNumber(), "Passives/JumpRelease", 7);
						ThrustThingZ(0, 45, 0, 0);
						TakeInventory("SecondJump", 1);
						secondAct = true;
					}
				}
				//did we give you the second jump? now you have it
				if (secondGave == false)
				{
					delay(5);
					GiveInventory("SecondJump", 1);
					secondGave = true;
				}
			}
			//release detection
			else
			{
				if ((GetActorZ(0) - GetActorFloorZ(0)) == 0.0)
				{
					//floor detection and resets jump variables if they are true
					if (secondAct == true || secondGave == true)
					{
						TakeInventory("SecondJump", 1);
						secondAct = false;
						secondGave = false;
					}
				}
			}
		delay(1);	
		}
	}
}

//===========================================================================================
//
//		Chargeable Jump
//		Given to the Guardian, will probably give to others
//
//===========================================================================================

Script "chargeableJump" (void)
{
	int holdTime;
	
	if(PlayerClass(PlayerNumber())==CLASS_GUARDIAN) //Guardian check
	{
		while (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(),APROP_Health) > 0)
		{
			if (CheckInventory("JumpChargeActive") == 0)
			{
				TakeInventory("JumpCharge", 5);
			}
			
			buttons = GetPlayerInput(-1, INPUT_BUTTONS);
			oldbuttons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
			
			//jump state was detected
			if (buttons & BT_JUMP) 
			{
				GiveInventory("JumpChargeActive", 1);
				//activated by initial trigger and holding down
				if (oldbuttons & BT_JUMP)
				{
					if (CheckInventory("JumpCharge") != 5)
					{
						holdTime++;
						
						if (holdTime == 30)
						{
							PlaySound(PLAYER_BASE_TID + PlayerNumber(), "Passives/ChargingJump", 7, 1.0, false, true);
							GiveInventory("JumpCharge", 1);
							holdTime = 0;
						}
					}
				}
				else
				{
				}
			}
			//release detection
			else
			{
				//check if actor is on the ground, then perform the jump
				if (oldbuttons & BT_JUMP)
				{
					if ((GetActorZ(0) - GetActorFloorZ(0)) == 0 && (GetActorProperty(1000 + PlayerNumber(), APROP_Health) > 0))
					{
						int jumpHeight = CheckInventory("JumpCharge");
						ACS_NamedExecuteAlways("jumpChargeHeight", 0, jumpHeight);
					}
					holdTime = 0;
					TakeInventory("JumpChargeActive", 1);
					TakeInventory("JumpCharge", 5);
				}
				else
				{
					//do nothing
				}
			}
		delay(1);	
		}
	}
}

Script "jumpChargeHeight" (int jHeight)
{
	int pT = PLAYER_BASE_TID + PlayerNumber();
	switch (jHeight)
	{
		case 0:
			ThrustThingZ(pT, 45, 0, 0);
			break;
		case 1:
			ThrustThingZ(pT, 55, 0, 0);
			break;
		case 2:
			ThrustThingZ(pT, 65, 0, 0);
			break;
		case 3:
			ThrustThingZ(pT, 75, 0, 0);
			break;
		case 4:
			ThrustThingZ(pT, 85, 0, 0);
			break;
		case 5:
			ThrustThingZ(pT, 95, 0, 0);
			break;
		default:
			Log(s:"The script is broekn!!!!!!!!!!");
			break;
	}
	
	if (jHeight != 0)
	{
		PlaySound(PLAYER_BASE_TID + PlayerNumber(), "Passives/JumpRelease", 7);
	}
}

//===========================================================================================
//
//		Wall Jumping
//		Given to the Guardian, will probably give to others
//
//===========================================================================================

script "wallClimbing" (void)
{
	int playerNum = PlayerNumber();
	int playerTid = playerNum + PLAYER_BASE_TID;
	playerJumpCooldown[playerNum] = 0;
	playerJumpDownPrevTic[playerNum] = false;
	playerJumpDownCurrTic[playerNum] = false;
	
	if (PlayerClass(playerNum) == CLASS_BLAZER)
	{
		while (GetActorProperty(playerTid,APROP_Health) > 0) 
		{
			recordJumpPress(playerNum);
			if (playerEligibleToWallJump(playerNum, playerTid)) 
			{
				//retriggered....
				playerJumpCooldown[playerNum] = Timer();
				PlaySound(playerTid, "Passives/WallClimb", 0, 1.0, 0, 0);
				ThrustThingZ(playerTid, THRUST_FORCE, THRUST_UPWARDS_CONSTANT, THRUST_ADD_CONSTANT);
			}
			Delay(1);
		}
	}
}

//===========================================================================================
//
//		Crouch Sliding
//		Given to the Banshee
//
//===========================================================================================
script "crouchSliding" (void)
{
	int playerNum = PlayerNumber();
	int playerTid = playerNum + PLAYER_BASE_TID;
	int hangTime;
	bool slideActive;
	bool keptMomentum;
	int loopTimes;
	bool firstJump;
	playerCrouchCooldown[playerNum] = 0;
	playerCrouchDownPrevTic[playerNum] = false;
	playerCrouchDownCurrTic[playerNum] = false;
	
	if (PlayerClass(playerNum) == CLASS_BANSHEE)
	{
		while (GetActorProperty(playerTid,APROP_Health) > 0) 
		{
			recordCrouchPress(playerNum);
			if (!playerOnGround(playerNum))
			{
				//if (firstJump == false)
				//{
					//firstJump = true;
				//}
				hangTime++;
				recordPlayerSpeed(playerNum);
				recordStrafePress(playerNum);
				recordPlayerViewAngle(playerNum);
				recordTurnDirection(playerNum);
			}
			
			if (playerOnGround(playerNum)) 
			{
				if (!CheckInventory("CrouchSlide"))
				{	
					if (playerEligibleToCrouchSlide(playerNum, playerTid)) 
					{
						hangtime = 0;
						ACS_NamedExecute("slideTimeHandling", 0, hangTime, playerNum, playerTid);
						GiveInventory("CrouchSlide", 1);
					}
				}
				if (CheckInventory("SlideAirMomentum"))
				{
					if (!CheckInventory("CrouchSlide") && playerHasSpeed(playerNum))
					{
						log(s:"momentum reset air");
						playerResetMomentum(playerTid);
						TakeInventory("SlideAirMomentum", 1);
					}
				}
			}
			
			if (CheckInventory("SlideAirMomentum"))
			{
				int speed = getactorproperty(playerNum, APROP_SPEED);
				log(s:"mDiff = ", d:playerSpeedCurrTic[playerNum]- playerSpeedPrevTic[playerNum]);
				if (speed > 1.00 && LostMomentum(playerNum))
				{
					log(s:"lost significant momentum... ");
					playerDecreaseMomentum(playerNum, playerTid, speed);
				}
				if (LostAllMomentum(playerNum))
				{
					log(s:"all momentum lost");
					playerResetMomentum(playerTid);
					TakeInventory("SlideAirMomentum", 1);
				}
			}
			//recordJumpPress(playerNum);
			//recordCrouchPress(playerNum);
			
			While(checkInventory("CrouchSlide"))
			{
				slideActive = true;
				int sFactor = getactorproperty(playerNum, APROP_SPEED);
				recordCrouchPress(playerNum);
				recordJumpPress(playerNum);
				recordPlayerSpeed(playerNum);
				recordStrafePress(playerNum);
				recordPlayerViewAngle(playerNum);
				recordTurnDirection(playerNum);

				if (loopTimes == 0)
				{
					print(d:loopTimes, s:" loop check");
					loopTimes++;
					//Just started Slide, here we control whatever happens the first time around
					//if(playerJumpAngle)
				}
				
				//crouch death handler
				if (!playerEligibleToContinueSlide(playerNum, playerTid))
				{
					if (!playerPressingCrouch(playerNum) && playerOnGround(playerNum))
					{
						log(s:"dead uncrouch");
						GiveInventory("SlideAirMomentum", 1);
					}
					if (!LostAllMomentum(playerNum))
					{
						log(s:"dead speed");
					}
					if (!playerOnGround(playerNum))
					{
						log(s:"dead jump");
					}
					TakeInventory("CrouchSlide", 1);
				}
				
				//speed gains
				if (playerEligibleForMomentumGain(playerNum, playerTid))
				{
					int speedAmt = angleChangeAmount(playerNum);
					setactorproperty(playerNum, APROP_SPEED, sFactor + speedAmt);
					//if(playerEligibleForExtraGain(playerNum,playerTid))
					//{
					//}
				}
				
				//speed penaltiies
				if (playerHasSpeed(playerNum) && loopTimes > 1)
				{
					if (playerNotStrafing(playerNum) && playerNotTurning(playerNum))
					{
						log(s:"speed reduced to not turning/strafing");
						setactorproperty(playerNum, APROP_SPEED, sFactor - 0.075);
						if (sFactor - 0.075 <= 0)
						{
							playerResetMomentum(playerNum);
						}
					}
				}
				Delay(1);
			}
			if (slideActive == true)
			{
				slideActive = false;
				loopTimes = 0;
				StopSound(playerTid, 7);
			}
			Delay(1);
		}
	}
}

Script "slideTimeHandling" (int hangTime, int playerNum, int playerTid)
{
	int time = hangTime / 3;
	
	if (time < CROUCHSLIDE_MINSLIDETIME)
	{
		time = CROUCHSLIDE_MINSLIDETIME;
	}
	
	if (time > CROUCHSLIDE_MAXSLIDETIME)
	{
		time = CROUCHSLIDE_MAXSLIDETIME;
	}

	PlaySound(playerTid, "Passives/CrouchSlide/Start", 8, 1.0, 0, 1.0);
	PlaySound(playerTid, "Passives/CrouchSlide/Idle", 7, 1.0, 1, 1.0);
	//ACS_NamedExecute("crouchslideHandling", 0, playerNum, playerTid);
	
	until (time == 0 || !CheckInventory("CrouchSlide"))
	{
		HudMessage(s:"Time is... ", d:time; HUDMSG_PLAIN, 999, CR_WHITE, 0.5, 0.85, 1.0);
		delay(35);
		if (time == 1)
		{
			log(s:"dead time");
			TakeInventory("CrouchSlide", 1);
		}
		time--;
	}
	terminate;
}

//===========================================================================================
//
//		CrouchDiving
//		Given to the Berserker, will probably give to others
//
//===========================================================================================
script "crouchDiving" (void)
{
	int playerNum = PlayerNumber();
	int playerTid = playerNum + PLAYER_BASE_TID;
	playerCrouchDownPrevTic[playerNum] = false;
	playerCrouchDownCurrTic[playerNum] = false;
	
	if (PlayerClass(playerNum) == CLASS_BERSERKER)
	{
		while (GetActorProperty(playerTid,APROP_Health) > 0) 
		{
			recordCrouchPress(playerNum);
			recordPlayerSpeed(playerNum);
			if (playerEligibleToCrouchDive(playerNum, playerTid)) 
			{
				PlaySound(playerTid, "Passives/CrouchDive", 0, 1.0, 0, 0);
				ThrustThingZ(playerTid, THRUST_CROUCH_FORCE, 1, 1);
			}
		Delay(1);	
		}
	}
}

function bool playerEligibleToCrouchDive(int playerNum, int playerTid) {
	int noGrd = !playerOnGround(playerTid);
	int crouch = playerPressingCrouch(playerNum);
	return noGrd && crouch;
}

//===========================================================================================
//
//		Air Thrust
//		Given to the Berserker, will probably give to others
//
//===========================================================================================
script "airThrusting" (void)
{
	int playerNum = PlayerNumber();
	int playerTid = playerNum + PLAYER_BASE_TID;
	//release
	playerForwardReleaseCurrTic[playerNum] = 0;
	playerBackwardReleaseCurrTic[playerNum] = 0;
	playerLeftReleaseCurrTic[playerNum] = 0;
	playerRightReleaseCurrTic[playerNum] = 0;
	//initial
	playerForwardInitialTic[playerNum] = 0;
	playerBackwardInitialTic[playerNum] = 0;
	playerLeftInitialTic[playerNum] = 0;
	playerRightInitialTic[playerNum] = 0;
	//current
	playerForwardDownCurrTic[playerNum] = 0;
	playerBackwardDownCurrTic[playerNum] = 0;
	playerLeftDownCurrTic[playerNum] = 0;
	playerRightDownCurrTic[playerNum] = 0;
	playerThrustCooldown[playerNum] = 0;
	
	int airTicDelay = 5;
	bool thrustActive;
	bool hudActive;
	
	if (PlayerClass(playerNum) == CLASS_TERMINATOR)
	{
		while (GetActorProperty(playerTid,APROP_Health) > 0) 
		{
			if(playerOnGround(playerTid))
			{
				thrustActive = false;
				ACS_NamedTerminate("thrustHandler",0);
			}
			
			if(playerEligibleToAirThrust(playerNum, playerTid) && thrustActive == false)
			{
				thrustActive = true;
				ACS_NamedExecute("thrustHandler", 0, playerNum, playerTid);
			}
			
		Delay(1);
		}
	}
}

Script "thrustHandler" (int playerNum, int playerTid)
{
	clearAllThrustVars(playerNum);
	int timeoutDelay = 35;
	Until(matchesFound(playerNum))
	{
		if(timeoutDelay == 0)
		{
			clearAllThrustVars(playerNum);
			timeoutDelay = 35;
		}
		if(!initialDirectionPressed(playerNum))
		{
			recordInitialDirectionInput(playerNum);
			Delay(1);
			continue;
		}
		if(initialReleaseEmpty(playerNum))
		{
			recordInitialRelease(playerNum);
			Delay(1);
			timeoutDelay--;
			continue;
		}
	Delay(1);
	}
	timeoutDelay = 35;
	Delay(5);
	
	
	Until(directionInputSuccess(playerNum))
	{
		if(timeoutDelay == 0)
			restart;
			
		recordCurrDirectionInput(playerNum);
		Delay(1);
		timeoutDelay--;
	}
	
	int tAngle = thrustDirtoAngle(playerNum);
	ACS_NamedExecute("dodgeThrust", 0, playerTid, tAngle);
	playerThrustCooldown[playerNum] = Timer();
	terminate;
}

script "dodgeThrust" (int playerTid, int angle)
{
	log(d:angle);
	PlaySound(playerTid, "Passives/AirThrust", 0, 1.0, 0, 0);
	ThrustThing(angle, THRUST_DODGE_FORCE, 0, playerTid);
}

//===========================================================================================
//
//		Strafe Jumping
//
//===========================================================================================
script "strafeJumping" (void)
{
	int playerNum = PlayerNumber();
	int playerTid = playerNum + PLAYER_BASE_TID;
	playerJumpDownPrevTic[playerNum] = false;
	playerJumpDownCurrTic[playerNum] = false;
	
	playerSpeedPrevTic[playerNum]= false;
	playerSpeedCurrTic[playerNum]= false;

	playerLookAngleOldTic[playerNum]= false;
	playerLookAnglePrevTic[playerNum]= false;
	playerLookAngleCurrTic[playerNum]= false;

	playerTurnDirOldTic[playerNum]= false;
	playerTurnDirPrevTic[playerNum]= false;
	playerTurnDirCurrTic[playerNum]= false;

	
	if (PlayerClass(playerNum) == CLASS_ROCKETEER)
	{
		while (GetActorProperty(playerTid,APROP_Health) > 0) 
		{
			int currSpeed = getactorproperty(playerNum, APROP_SPEED);
			if (!playerOnGround(playerNum))
			{
				recordStrafePress(playerNum);
				recordPlayerViewAngle(playerNum);
				recordTurnDirection(playerNum);
				recordPlayerSpeed(playerNum);
				recordJumpAngleAmt(playerNum);
				if (playerAirTurningIntoDirection(playerNum))
				{
					
				}
				if (LostMomentum(playerNum))
				{
					
					if (currSpeed > 1.00)
					{
						setactorproperty(playerNum, APROP_SPEED, currSpeed - 0.25);
					}
				}
				//hangTime++;
			}
			if (playerOnGround(playerNum))
			{
				recordPlayerSpeed(playerNum);
				recordJumpPress(playerNum);
				if (checkInventory("StrafeMomentum"))
				{
					if (playerEligibleToGainMomentum(playerNum, playerTid)) 
					{
						int speedAmt = jumpAngleChangeAmount(playerNum);
						if (getactorproperty(playerNum, APROP_SPEED) < 1.5)
						{
							currSpeed = getactorproperty(playerNum, APROP_SPEED);
							setactorproperty(playerNum, APROP_SPEED, currSpeed + speedAmt);
						}
					}
				}
				if (!checkInventory("StrafeMomentum") && getactorproperty(playerNum, APROP_SPEED) > 1.0)
				{
					log(s:"speed reset to not using jump");
					setactorproperty(playerNum, APROP_SPEED, 1.00);
					//jumped = false;
				}
			}
			Delay(1);
		}
	}
}