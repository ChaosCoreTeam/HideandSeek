#library "ABILITIES"
#include "DEFINITIONS.acs"
#import "Banshee.acs"
#import "Blazer.acs"
#import "Guardian.acs"
#import "Illusionist.acs"
#import "Rocketeer.acs"
#import "Teleporter.acs"
#import "Hunter.acs"
#import "Scouter.acs"
#import "Berserker.acs"
#import "Terminator.acs"
#import "Polymorphist.acs"
#import "Tactician.acs"

#define FIRST_ABILITY_INDEX 0
#define SECOND_ABILITY_INDEX 12

// We need a way to go from the 'item name' to a readable English name when we
// show it in the player HUD. This will allow us to do that where we look up
// by the first value (item name), and if the player has it then we will use
// the second value (english name) when we print the message.

str abilityData[NUM_POWERUPS][2] = 
{
    { "BansheeFirstCooldown", "Life Support"},
    { "BlazerFirstCooldown", "Dash"},
    { "GuardianFirstCooldown", "Smoke bomb"},
    { "IllusionistFirstCooldown", "Disguise" },
    { "RocketeerFirstCooldown", "Barrage" },
    { "TeleporterFirstCooldown", "Translocator" },
    { "HunterFirstCooldown", "Dual Wield" },
    { "ScouterFirstCooldown", "Hookshot" },
    { "BerserkerFirstCooldown", "Bloodlust" },
    { "TerminatorFirstCooldown", "Laser Shot" },
    { "PolymorphistFirstCooldown", "Lostsoul" },
    { "TacticianFirstCooldown", "Tripmines" },
    { "BansheeSecondCooldown", "Energy Field" },
    { "BlazerSecondCooldown", "Recall" },
    { "GuardianSecondCooldown", "Invulnerability" },
    { "IllusionistSecondCooldown", "Shrink" },
    { "RocketeerSecondCooldown", "Knockback" },
    { "TeleporterSecondCooldown", "Overcharge" },
    { "HunterSecondCooldown", "Freeze Gun" },
    { "ScouterSecondCooldown", "Tracking Device" },
    { "BerserkerSecondCooldown", "Charge" },
    { "TerminatorSecondCooldown", "Devastators" },
    { "PolymorphistSecondCooldown", "Cybruiser Transformation" },
    { "TacticianSecondCooldown", "Sentry" }
};

function bool onCoolDown(int abilityNum) 
{
	return CheckInventory(StrParam(s:abilityData[PlayerClass(PlayerNumber())+abilityNum][POWERUP_ITEM_NAME])) > 0;
}

function str getPowerName(int abilityNum)
{
	return StrParam(s:abilityData[abilityNum][POWERUP_ENGLISH_NAME]);
}

script "giveCooldownForSeconds"(int powerName, int seconds)
{
	GiveInventory(powerName, seconds);
	
	for (int x = 0; x < seconds; x++)
	{
		Delay(35);
		TakeInventory(powerName, 1);
	}
}

script "cooldownActive" (void) CLIENTSIDE
{
	HudMessage(s:"Cooldown still active!"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 3.0);
	PlaySound (0, "CooldownActive", 3); 
}

script "HNS_PrimaryAbility" (int hTaunt, int sTaunt) NET 
{
	int classNum = PlayerClass(PlayerNumber());
	str powerName = StrParam(s:abilityData[PlayerClass(PlayerNumber())][POWERUP_ITEM_NAME]);
	
	if (onCoolDown(FIRST_ABILITY_INDEX))
	{
		ACS_NamedExecuteAlways("cooldownActive", 0);
		terminate;
	}
	
    switch (classNum) 
	{
    case CLASS_BANSHEE:
		ACS_NamedExecuteAlways("BansheeFirstAbility", 0, powerName);
		break;
		
	case CLASS_BLAZER:
		ACS_NamedExecuteAlways("BlazerFirstAbility", 0, powerName);
        break;
	
    case CLASS_GUARDIAN:
		Spawn("SmokeCanister", GetActorX(0), GetActorY(0), GetActorZ(0));
		break;
		
	case CLASS_ILLUSIONIST:
		ACS_NamedExecuteAlways("IllusionistFirstAbility", 0, powerName, classNum);
		break;
    
	case CLASS_ROCKETEER:
		ACS_NamedExecuteAlways("RocketeerFirstAbility", 0, powerName, classNum);
        break;
	
	case CLASS_TELEPORTER:
		ACS_NamedExecuteAlways("TeleporterFirstAbility", 0, powerName);
        break;
		
	case CLASS_HUNTER:
		ACS_NamedExecuteAlways("HunterFirstAbility", 0, powerName);
        break;
	
	case CLASS_SCOUTER:
		ACS_NamedExecuteAlways("ScouterFirstAbility", 0, powerName);
        break;
	
	case CLASS_BERSERKER:
		ACS_NamedExecuteAlways("BersekerFirstAbility", 0, powerName);
        break;
	
	case CLASS_TERMINATOR:
		ACS_NamedExecuteAlways("TerminatorFirstAbility", 0, powerName);
        break;
	
	case CLASS_POLYMORPHIST:
		ACS_NamedExecuteAlways("PolymorphistFirstAbility", 0, powerName);
		break;
		
	case CLASS_TACTICIAN:
		ACS_NamedExecuteAlways("TacticianFirstAbility", 0, powerName);
		break;
		
    default:
        PrintBold(s: "Class not defined");
        break;
    }
	
	//Excluding the blazer because it has it's own cooldown system
	if (PlayerClass(PlayerNumber()) != CLASS_BANSHEE && PlayerClass(PlayerNumber()) != CLASS_BLAZER && PlayerClass(PlayerNumber()) != CLASS_BERSERKER)
	{
		GiveInventory(powerName, 999);
		ACS_NamedExecuteAlways("giveCooldownForSeconds", 0, powerName, GetAmmoCapacity(powerName));
	}
} 
script "HNS_SecondAbility" (int hTaunt, int sTaunt) NET 
{

	int classNum = PlayerClass(PlayerNumber());
	str powerName = StrParam(s:abilityData[PlayerClass(PlayerNumber())+12][POWERUP_ITEM_NAME]);
	
	if (onCoolDown(SECOND_ABILITY_INDEX))
	{
		ACS_NamedExecuteAlways("cooldownActive", 0);
		terminate;
	}
	
    switch (classNum) 
	{
	case CLASS_BANSHEE:
		ACS_NamedExecuteAlways("BansheeSecondAbility", 0, powerName);
		break;
	case CLASS_BLAZER:
		ACS_NamedExecuteAlways("BlazerSecondAbility", 0, powerName);
		break;
	case CLASS_GUARDIAN:
		ACS_NamedExecuteAlways("GuardianSecondAbility", 0, powerName);
		break;
	case CLASS_ILLUSIONIST:
		ACS_NamedExecuteAlways("IllusionistSecondAbility", 0, powerName);
		break;
	case CLASS_ROCKETEER:
		ACS_NamedExecuteAlways("RocketeerSecondAbility", 0, powerName);
		break;
	case CLASS_TELEPORTER:
		ACS_NamedExecuteAlways("TeleporterSecondAbility", 0, powerName);
		break;
	case CLASS_HUNTER:
		ACS_NamedExecuteAlways("HunterSecondAbility", 0, powerName);
		break;
	case CLASS_SCOUTER:
		ACS_NamedExecuteAlways("ScouterSecondAbility", 0, powerName);
		break;
	case CLASS_BERSERKER:
		ACS_NamedExecuteAlways("BerserkerSecondAbility", 0, powerName, sTaunt);
		break;
	case CLASS_TERMINATOR:
		ACS_NamedExecuteAlways("TerminatorSecondAbility", 0, powerName);
		break;
	case CLASS_POLYMORPHIST:
		ACS_NamedExecuteAlways("PolymorphistSecondAbility", 0, powerName);
		break;
	case CLASS_TACTICIAN:
		ACS_NamedExecuteAlways("TacticianSecondAbility", 0, powerName);
		break;
	}
	//Excluding the guardian because it has it's own cooldown system
	if(PlayerClass(PlayerNumber()) != 2)
    {
		GiveInventory(powerName, 999);
		ACS_NamedExecuteAlways("giveCooldownForSeconds", 0, powerName, GetAmmoCapacity(powerName));
	}
}

script "Client_Powerup_HudMessage" ENTER CLIENTSIDE {
    while (true) {
        // Inside the loop because it's possible while this script sleeps for
        // another script to change the hud dimensions. We want a clean slate
        // every single iteration.
        SetHudSize(640, 480, false);
        int offsetY = POWERUP_HUD_Y_OFFSET;
        int powerupCountFound = 0;
        
        for (int powerupIndex = 0; powerupIndex < NUM_POWERUPS; powerupIndex++) {
            int secondsLeft = CheckInventory(abilityData[powerupIndex][POWERUP_ITEM_NAME]);
            
            if (secondsLeft > 0) {
                HudMessage(s: "Cooldown for ", 
                           s: abilityData[powerupIndex][POWERUP_ENGLISH_NAME], 
                           s: " lasts ", 
                           d: secondsLeft, 
                           s: " more seconds";
                           HUDMSG_PLAIN, 123456 + powerupIndex, CR_YELLOW,
                           POWERUP_HUD_X_OFFSET, offsetY, 
                           POWERUP_HUD_TEXT_VISIBLE_SEC);            
                           
                offsetY -= 20.0;
                powerupCountFound++;
			{
				
			}
            }
        }
        delay(1);
    }
}