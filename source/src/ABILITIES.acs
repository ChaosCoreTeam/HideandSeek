#library "ABILITIES"
#import "DEFINITIONS.acs"
#include "zcommon.acs"
#import "Banshee.acs"
#import "Blazer.acs"
#import "Guardian.acs"
#import "Illusionist.acs"
#import "Rocketeer.acs"
#import "Teleporter.acs"
#import "Hunter.acs"
#import "Scouter.acs"
#import "Berserker.acs"
#import "Terminator.acs"
#import "Polymorphist.acs"
#import "Tactician.acs"

str firstAbilityNames[NUMBER_OF_CLASSES] = 
{
     "Life Support",
     "Dash",
     "Smoke bomb",
     "Disguise",
     "Barrage",
     "Translocator",
     "Dual Wield",
     "Hookshot",
     "AxeThrow",
     "Laser Shot",
     "Lostsoul",
     "Tripmines",
};

str secondAbilityNames[NUMBER_OF_CLASSES] =
{
	 "Energy Field",
     "Recall",
     "Invulnerability",
     "Shrink",
     "Knockback",
     "Overcharge",
     "Freeze Gun",
     "Tracking Device",
     "Bloodlust",
     "Devastators",
     "Cybruiser Transformation",
     "Sentry"
};

//===========================================================================================
// Ability Handling Code
//===========================================================================================

script "HNS_ActivateAbility" (int abilitySlot) NET
{
	if (onCoolDown(abilitySlot))
	{
		HudMessage(s:abilityNameString(abilitySlot), s:" is still on cooldown"; HUDMSG_PLAIN, 7, CR_RED, 1.5, 0.65, 3.0, 3.0);
		PlaySound (0, "Abilities/Failure", 3, 1.0, false, ATTN_NORM, true); 
		terminate;
	}
	
	ACS_NamedExecuteAlways(StrParam(s:classNames[PlayerClass(PlayerNumber())],s:slotString(abilitySlot),s:"Ability"), 0);
	Delay(5);
}

//===========================================================================================
// Modular Ability Active State Handling
//===========================================================================================
script "abilityStateHandling" (int abilitySlot)
{
	int cNum = PlayerClass(PlayerNumber());
	str durationString = StrParam(s:classNames[cNum],s:"AbilityDuration");
	str activeString = StrParam(s:classNames[cNum],s:"AbilityActive");
	str abilityEndString = StrParam(s:classNames[cNum],s:"AbilityEnd");
	
	if (cNum == CLASS_ILLUSIONIST || cNum == CLASS_HUNTER || cNum == CLASS_POLYMORPHIST)
	{
		durationString = StrParam(s:classNames[cNum],s:slotString(abilitySlot),s:"Duration");
		activeString = StrParam(s:classNames[cNum],s:slotString(abilitySlot),s:"Active");
		abilityEndString =  StrParam(s:classNames[cNum],s:slotString(abilitySlot),s:"End");
	}
	
	int abilityDuration = GetAmmoCapacity(durationString);
	GiveInventory(durationString, abilityDuration);
	GiveInventory(activeString, 1);
	
	For (int x = abilityDuration; x > 0; x--)
	{
		if (cNum == CLASS_ILLUSIONIST || cNum == CLASS_POLYMORPHIST)
		{
			if (CheckInventory(activeString) == false)
			{
				TakeInventory(durationString, abilityDuration);
				ACS_NamedExecuteAlways(abilityEndString,0);
				Terminate;
			}
		}
		//===========================================================================================
		//class specific item that ends the duration early, if we don't have anything 
		// make a placeholder so we never reach the termination state in this script.
		//===========================================================================================
		TakeInventory(durationString, 1);
		Delay(35);
		
		//===========================================================================================
		//Active ability wearing off
		//===========================================================================================
		if (x <= 3 && x > 0 )
		{
			PlaySound(0, "Abilities/EndWarning", 0, 1.0, false, ATTN_NORM, true);
		}
	}
	
	TakeInventory(durationString, 1);
	TakeInventory(activeString, 1);
	
	HudMessage(s:abilityNameString(abilitySlot), s:" can now be reused"; HUDMSG_PLAIN, 7, CR_RED, 1.5, 0.65, 3.0, 3.0);
	
	ACS_NamedExecuteAlways(abilityEndString,0);
}

//===========================================================================================
// modular cooldown handling
//===========================================================================================

script "activateCooldown"(int abilitySlot) CLIENTSIDE
{
	str cdName = cooldownString(abilitySlot);
	int cTime = GetAmmoCapacity(cdName);
	TakeInventory(cdName, cTime);
	
	for (int x = 0; x <= cTime; x++)
	{
		Delay(35);
		GiveInventory(cdName, 1);
	}
	
	HudMessage(s:abilityNameString(abilitySlot), s:" can now be reused"; HUDMSG_PLAIN, 7, CR_RED, 1.5, 0.65, 3.0, 3.0);
}

//===========================================================================================
//functions so i don't rewrite everything
//===========================================================================================

function bool onCoolDown(int abilitySlot) 
{
	str cdName = cooldownString(abilitySlot);
	int cdTime = GetAmmoCapacity(cdName);
	return CheckInventory(cdName) < cdTime;
}

function bool isActive (int abilitySlot)
{
	return CheckInventory(StrParam(s:classNames[PlayerClass(PlayerNumber())],s:slotString(abilitySlot),s:"Active")) > 0;
}

function str cooldownString (int abilitySlot)
{
	return StrParam(s:classNames[PlayerClass(PlayerNumber())],s:slotString(abilitySlot),s:"Cooldown");
}

function str slotString (int abilitySlot)
{
	str slotNum = "First";
	if (abilitySlot == 2) { slotNum = "Second"; }
	return slotNum;
}

function str abilityNameString (int abilitySlot)
{
	str abilityName = firstAbilityNames[PlayerClass(PlayerNumber())];
	if (abilitySlot == 2) { abilityName = secondAbilityNames[PlayerClass(PlayerNumber())]; }
	return abilityName;
}