#library "Function.acs"
#import "DEFINITIONS.acs"

function int abs(int n)
{
    if (n < 0)
        return -n;
    return n;
}

function int min(int a, int b)
{
	if (a < b)
		return a;
	return b;
}

function int max(int a, int b)
{
	if (a > b)
		return a;
	return b;
}

function int fixedDistance(int tid1, int tid2)
{
	int x = GetActorX(tid1) - GetActorX(tid2);
	int y = GetActorY(tid1) - GetActorY(tid2);
	int ang = vectorangle(x, y);

	int len = 0;	
	if (((ang + 0.125) % 0.5) > 0.25)
		len = fixeddiv(y, sin(ang));
	else 
		len = fixeddiv(x, cos(ang));
	return len;
}

function int GetTargetAngle (int tid1, int tid2)
{
    int x, y;
    x = GetActorX(tid2) - GetActorX(tid1);
    y = GetActorY(tid2) - GetActorY(tid1);
    return VectorAngle(x, y);
}

function int getaspectratio(void)
{
	int width = getcvar("vid_defwidth");
	int height = getcvar("vid_defheight");
	int nowidescreen = getcvar("vid_nowidescreen");
	int tft = getcvar("vid_tft");
	if(nowidescreen)
	{
		if(!tft)
			return ASPECT_4_3;
		if(fixedmul(height<<16, fixeddiv(5.0, 4.0)) == width<<16)
			return ASPECT_5_4;
		else
			return ASPECT_4_3;
	}
	if(abs((abs(fixedmul(height<<16, fixeddiv(16.0, 9.0)))>>16) - width) < 10)
	{
		return ASPECT_16_9;
	}
	if(abs((abs(fixedmul(height<<16, fixeddiv(16.0, 10.0)))>>16) - width) < 60)
	{
		if((width == 320 && height == 200) || (width == 640 && height == 400))
			return ASPECT_4_3;
		return ASPECT_16_10;
	}
	if(fixedmul(height<<16, fixeddiv(5.0, 4.0))>>16 == width && tft)
	{
		return ASPECT_5_4;
	}
	return ASPECT_4_3;
}