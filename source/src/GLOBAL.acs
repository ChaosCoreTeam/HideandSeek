#library "Global"
#import "DEFINITIONS.acs"
#include "zcommon.acs"
#import "STATES.acs"
#import "FUNCTION.acs"

int pteam[MAXPLAYERS];
int radarteam[MAXPLAYERS];
int NumPlayers = 0;
int buttons;
int nobuttons;
int FadeInValue = 0;
int FadeOutValue = 0;

/*
		 			TID ASSIGNMENTS

		 1000-1063 = Players
		 10000-10063 = Spectating/Disconnected Players
		 2050-2081 = Teleporter Projectiles
		 3000-3031 = Teleporter Portals
		 3400 - 3463 = Illusionist Decoys
		 3600 - 3663 = Translocators

/* ************************************************** */
/*               START UNIVERSAL SCRIPTS              */
/* ************************************************** */

bool classInfoOn;

Script "HNS_ClassDescriptionOn" (int class)
{
	SetHudSize (640, 480, 1);
	SetFont("HUDDESC");
	HudMessage (s: "A";HUDMSG_PLAIN,9900,CR_UNTRANSLATED,320.0,240.0,5.0);
}

Script "HNS_ClassDescriptionOff" (void)
{
	HudMessage(s:""; 0, 9900, 0, 0, 0, 0);
}

Script "hudTimer" open //Timer
{	
	if (GetCVar("timelimit") == 0) { Terminate; }
	int Time = GetCVar("hns_timelimitseconds");
	Time--;
	Until(Time == 0)
	{
		SetFont("BIGFONT");
		if (Time <= 60)
			HudMessageBold(s:"Round Ends In: \cg", d:Time/60, s:":", d:(Time%60)/10, d:Time%10; HUDMSG_PLAIN, 2, CR_WHITE, 0.03, 0.85, 3.5);
		else if (Time > 60 && Time <= 180)
			HudMessageBold(s:"Round Ends In: \ck", d:Time/60, s:":", d:(Time%60)/10, d:Time%10; HUDMSG_PLAIN, 2, CR_WHITE, 0.03, 0.85, 3.5);
		else if (Time > 180)
			HudMessageBold(s:"Round Ends In: \cd", d:Time/60, s:":", d:(Time%60)/10, d:Time%10; HUDMSG_PLAIN, 2, CR_WHITE, 0.03, 0.85, 3.5);
		delay(35);
		Time--;
		
	}
	for(int i=0;i<MAXPLAYERS;i++)
	{
		SetFont("BIGFONT");
		HudMessageBold(s:"Round Ends In: \cm0:00"; HUDMSG_PLAIN, 2, CR_WHITE, 0.03, 0.85, 5);
		if(pteam[i]==1) thing_damage(PLAYER_BASE_TID+i,999,0);
	}
}

script "playerEnter" enter //Sets TIDs, HUD Scaling for our custom HUD, and executes the scripts!!
{
	thing_changetid(0,playernumber()+PLAYER_BASE_TID);
	pteam[playernumber()]=playerteam();
	Acs_ExecuteAlways(118, 0, 0, 0, 0); //Scouter Radar
	delay(1);
	ACS_NamedExecuteAlways("radarSetup", 0); //Scouter Jetpack & Vanisher Visibility Fades\
	delay(1);
	ACS_NamedExecuteAlways("vanishingSetup",0);
	delay(1);
	Acs_NamedExecuteAlways("chargeableJump",0); //guardian jump setup
	delay(1);
}

script "playerRespawn" respawn //Sets TIDs, HUD Scaling for our custom HUD, and executes the scripts!!
{
	thing_changetid(0,playernumber()+PLAYER_BASE_TID);
	pteam[playernumber()]=playerteam();
	Acs_ExecuteAlways(117, 0, 0, 0, 0); //Scouter Radar
	delay(1);
	Acs_ExecuteAlways(118, 0, 0, 0, 0); //Scouter Jetpack & Vanisher Visibility Fades
	delay(1);
	ACS_NamedExecuteAlways("vanishingSetup",0);
}

Script "playerDisconnect" (int gone) disconnect
// Hopefully gets rid of anyone trying to abuse scripts when spectating
{
	Thing_ChangeTID(gone, 10000+gone);
}

Script "playerDeath" death
//Should change the TID of anyone who freakin' died.
{
	Thing_ChangeTID(PLAYER_BASE_TID+PlayerNumber(), 10000+PlayerNumber());
}

script "stateChange" (int active, int inactive, int misc) NET //State control, misc is wildcard checker
{
	if(active == 1)
	{
			if (misc == 5) // Jetpack GO!
			{
				SetActorState(PLAYER_BASE_TID + PlayerNumber(), "Jetpack", true);
			}
			if (misc == 15) //Jetpack state switch after firing
			{
				SetActorState(PLAYER_BASE_TID + PlayerNumber(), "JetpackHasFired", true);
			}
			if (misc == 20)
			{
				Delay(1);
				TakeInventory("JetFuel",1);
			}
			if (misc == 6) //Scream
			{
				SetActorState(PLAYER_BASE_TID + PlayerNumber(), "Scream", true);
			}
			if (misc == 7) //Old Scream
			{
				SetActorState(PLAYER_BASE_TID + PlayerNumber(), "OldScream", true);
			}
			if (misc == 9) //Fade In
			{
				SetActorState(PLAYER_BASE_TID + PlayerNumber(), "FadeIn", true);
			}
			if (misc == 10) //Visible
			{
				SetActorState(PLAYER_BASE_TID + PlayerNumber(), "Visible", true);
			}

	}
	if(inactive == 1)
	{
			if (misc == 3) //Jetpack disengaging
			{
				SetActorState(PLAYER_BASE_TID + PlayerNumber(), "NoJetpack", true);
			}
			if (misc == 4) //Silence
			{
				SetActorState(PLAYER_BASE_TID + PlayerNumber(), "Silent", true);
			}
			if (misc == 8) //Fade out
			{
				SetActorState(PLAYER_BASE_TID + PlayerNumber(), "FadeOut", true);
			}
	}
}

/* ************************************************** */
/*  END UNIVERSAL SCRIPTS ; */
/* ************************************************** */

/* ************************************************** */
/* START CLASS SPECIFIC SHIT */
/* ************************************************** */


Script 109 respawn CLIENTSIDE
//Information on player class upon spawning!
{
	if(consoleplayernumber() != playernumber()) terminate;
	
	if(PlayerClass(PlayerNumber())==1) //Banshee
    {
        HudMessage(s:"\ccCLASS : \cuBanshee\n\n\ccWEAPONS : \crRejuvinator"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 7.0);
    }
    if(PlayerClass(PlayerNumber())==2) //Blazer
	{
		HudMessage(s:"\ccCLASS : \cuBlazer\n\n\ccWEAPONS : \crNone\n\ccABILITY : \ciExtreme Speed \cc( \cdRun Around! \cc)"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 7.0);
	}
	if(PlayerClass(PlayerNumber())==5) //Rocketeer
	{
		HudMessage(s:"\ccCLASS : \cuRocketeer\n\n\ccWEAPONS : \crNo-Damage Rocket Launcher\n\ccABILITY : \ciRocket Jumping \cc( \cdJump + Fire At Ground \cc)\n\ccABILITY : \ciAmmo Regen \cc( \cdStand Still to Regen \cc)"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 7.0);
	}
	if(PlayerClass(PlayerNumber())==6) //Teleporter
	{
		HudMessage(s:"\ccCLASS : \cuTeleporter\n\n\ccWEAPONS : \crAutomatic-Relocation Transmission Rifle\n\ccABILITY : \ciRadiation Shield \cc( \cdNo melty-melty! \cc)\n\ccABILITY : \ciAmmo Regen \cc( \cdStand Still to Regen \cc)"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 7.0);
	}
	if(PlayerClass(PlayerNumber())==7) //Hunter
	{
		HudMessage(s:"\ccCLASS : \ckHunter\n\n\ccWEAPONS : \crCombat Shotgun \cc, \crRapid-Fire Chaingun\n\ccABILITY : \ciAmmo Regen \cc( \cdStand Still to Regen \cc)"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 7.0);
	}
	if(PlayerClass(PlayerNumber())==8) //Scouter
	{
		HudMessage(s:"\ccCLASS : \ckScouter\n\n\ccWEAPONS : \crRail Pistol \cc, \crCombat Knife\n\ccABILITY : \ciRadar \cc( \cdLocate Hiders within a short radius \cc)\n\ccABILITY : \ciJetpack \cc( \cdDouble-Jump to enable \cc)\n\ccABILITY : \ciAmmo Regen \cc( \cdStand Still to Regen \cc)"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 7.0);
	}
	if(PlayerClass(PlayerNumber())==9) //Berserker
	{
		HudMessage(s:"\ccCLASS : \ckBerserker\n\n\ccWEAPONS : \crMighty Fists\n\ccABILITY : \ciDrug-Induced Insane Speed \cc( \cdRun Around! \cc)\n\ccABILITY : \ciScream Loudly \cc( \cdAAAAAAAHHHHHHHHH \cc)"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 7.0);
	}
	if(PlayerClass(PlayerNumber())==10) //Terminator
	{
		HudMessage(s:"\ccCLASS : \ckTerminator\n\n\ccWEAPONS : \crPlasma Rifle \cc, \crFragmentation Grenades\n\ccABILITY : \ciGrenade Throw Strength \cc( \cdHold Down Fire Button To Charge \cc)\n\ccABILITY : \ciPlasma Rifle Ammo Regen \cc( \cdStand Still to Regen \cc)"; HUDMSG_FADEOUT, 7, -1, 1.5, 0.65, 3.5, 7.0);
	}
}



/* ************************************************** */
/*  END CLASS SPECIFIC SHIT ; START COMPLICATED SHIT  */
/* ************************************************** */

Script 118 (void) CLIENTSIDE
//Jumpin Jetpacks Lots of notes cause this shit confuses The Xen.
{
	int HnSVariable;
	int HnSVariabl3;
	if(PlayerClass(PlayerNumber())==7) //Scouter check
	{
		while (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(),APROP_Health) > 0)
		{
			buttons = GetPlayerInput(-1, INPUT_BUTTONS);
			nobuttons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
			if (buttons & BT_JUMP)
			{
				if (nobuttons & BT_JUMP)
				{
					if (nobuttons & BT_ATTACK && HnSVariable == 1)
					{
						ACS_NamedExecuteAlways("stateChange", 0, 1, 0, 20);
						//This is what happens when you hold down the fire button. Basically for fuel bullshit.
					}
					if (buttons & BT_ATTACK && HnSVariable == 1)
					{
						ACS_NamedExecuteAlways("stateChange", 0, 1, 0, 15);
						//If our great jetpack champion fires and changes his state, he is promptly reverted back so the jetpack flames and smoke don't vanish!
					}
				}
				else
				{
					if ((GetActorZ(0) - GetActorFloorZ(0)) > 24.0 && (GetActorProperty(1000 + PlayerNumber(), APROP_Health) > 0))
					{
						HnSVariable = 1;
						ACS_NamedExecuteAlways("stateChange", 0, 1, 0, 5);
						//If the player presses Jump while at a reasonable height and isn't DEAD, their jetpack kicks in!
					}
				}
			}
			else
			{
				if (nobuttons & BT_JUMP && HnSVariable == 1)
				{
					HnSVariable = 0;
						ACS_NamedExecuteAlways("stateChange", 0, 0, 1, 3);
					//Release the Jump button and down to Earth you go!
				}
				else
				{
					//And do absolutely nothing while you're not pressing Jump at all!
				}
			}
		delay(1);
		}
	}
	if(PlayerClass(PlayerNumber()) < SEEKER_CLASS_START) //Hider check
	{
		while (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(), APROP_Health) > 0)
		{
			buttons = GetPlayerInput(-1, INPUT_BUTTONS);
			nobuttons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
				//For people with running on
				if (GetCVar("CL_Run")==1 && isVanished(PLAYER_BASE_TID + PlayerNumber()) == true)
				{
					if (HnSVariabl3 == 0) { HnSVariabl3 = 2; }
					if (buttons & BT_SPEED)
					{
						if (nobuttons & BT_SPEED)
							{
								//Continue to be walking invisibly~
								if (HnSVariabl3 == 1)
								{
									HnSVariabl3 = 2;
									ACS_NamedExecuteAlways("stateChange", 0, 0, 1, 8);
									//Unless you transition from walking while holding down shift, thena you go invisible.
								}
							}
							else
							{
								if (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(), APROP_Health) > 0)
								{
									HnSVariable = 1;
									ACS_NamedExecuteAlways("stateChange", 0, 0, 1, 8);
									//Become invisible when walking.
								}
							}
					}
					else if (buttons & (BT_FORWARD | BT_BACK | BT_MOVELEFT | BT_MOVERIGHT | BT_ATTACK))
					{
						if (nobuttons & (BT_FORWARD | BT_BACK | BT_MOVELEFT | BT_MOVERIGHT | BT_ATTACK))
						{
							//Stay visible while holding keys down.
							if (HnSVariable == 1)
							{
								HnSVariable = 0;
								ACS_NamedExecuteAlways("stateChange", 0, 1, 0, 9);
								//Become visible if going from walking to running!
							}
							if (HnSVariabl3 == 1)
							{
								HnSVariable = 0;
								HnSVariabl3 = 2;
								ACS_NamedExecuteAlways("stateChange", 0, 1, 0, 9);
								//Toggling CL_Run won't get you very far.
							}
						}
						else
						{
							if (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(), APROP_Health) > 0)
							{
								HnSVariable = 0;
								HnSVariabl3 = 2;
								ACS_NamedExecuteAlways("stateChange", 0, 1, 0, 9);
								//If the player isn't dead and is running around turn visible!
							}
						}
					}
					else 
					{
						if (nobuttons & (BT_FORWARD | BT_BACK | BT_MOVELEFT | BT_MOVERIGHT | BT_ATTACK))
						{
							ACS_NamedExecuteAlways("stateChange", 0, 0, 1, 8);
							//Release the movement keys and you are the invisible man.
						}
						else
						{
							//And do absolutely nothing while you're not moving at all!
						}
					}
				}
				if (GetCVar("CL_Run")==0 && isVanished(PLAYER_BASE_TID + PlayerNumber()) == true)
				//For people with running off (however few there are!)
				{
				if (HnSVariabl3 == 0) { HnSVariabl3 = 1; }
					if (buttons & BT_SPEED)
					{
						if (nobuttons & BT_SPEED)
						{
							//Continue to be running around invisible...Unless...
							if (HnSVariabl3 == 2)
							{
								HnSVariabl3 = 1;
								ACS_NamedExecuteAlways("stateChange", 0, 1, 0, 9);
								//Unless you transition from running while holding down shift, then you stay visible.
							}
						}
						else
						{
							if (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(), APROP_Health) > 0)
							{
								HnSVariable = 1;
								ACS_NamedExecuteAlways("stateChange", 0, 1, 0, 9);
								//Turn visible while running!
							}
						}
					}
					else if (buttons & (BT_FORWARD | BT_BACK | BT_MOVELEFT | BT_MOVERIGHT | BT_ATTACK))
					{
						if (nobuttons & (BT_FORWARD | BT_BACK | BT_MOVELEFT | BT_MOVERIGHT | BT_ATTACK))
						{
							//Keep walking invisibly when the movement keys are held down.
							if (HnSVariable == 1)
							{
								HnSVariable = 0;
								ACS_NamedExecuteAlways("stateChange", 0, 0, 1, 8);
								//Start walking invisibly if going from running to walking.
							}
							if (HnSVariabl3 == 2)
							{
								HnSVariable = 0;
								HnSVariabl3 = 1;
								ACS_NamedExecuteAlways("stateChange", 0, 0, 1, 8);
								//Toggling CL_Run won't get you very far.
							}
						}
						else
						{
							if (GetActorProperty(PLAYER_BASE_TID + PlayerNumber(), APROP_Health) > 0)
							{
								HnSVariable = 0;
								HnSVariabl3 = 1;
								ACS_NamedExecuteAlways("stateChange", 0, 0, 1, 8);
								//If the player isn't dead and is walking around then don't turn visible.
							}
						}
					}
					else 
					{
						if (nobuttons & (BT_FORWARD | BT_BACK | BT_MOVELEFT | BT_MOVERIGHT | BT_ATTACK | BT_SPEED))
						{
							ACS_NamedExecuteAlways("stateChange", 0, 0, 1, 8);
							//Release the movement keys and you are the invisible man.
						}
						else
						{
							//And do absolutely nothing while you're not moving at all!
						}
					}
				}
				//print(s:"running");
			delay(1);
		}
	}
}


Script "jetSpeedOn" (void)
//Set a reduced speed for the jetpacking player while enabling use of his jetpack.
{
	SetActorProperty(0, APROP_Speed, 0.75);
}

Script "jetSpeedOff" (void)
//After he's done jetpacking, give him back his original speed.
{
	SetActorProperty(0, APROP_Speed, 1.00);
}

function bool isVanished(int pNumber)
{	
	if (GetActorProperty(pNumber, APROP_Alpha) < 1.0)
	{
		return true;
	}
		return false;
}